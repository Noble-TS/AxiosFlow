/**

 * Auto-generated types based on API schema

 * Generated by axiosflow

 * @generated

 * @timestamp 2024-12-26T10:51:07.429Z

 */

import axios, { AxiosRequestConfig, isAxiosError } from 'axios';

import { BASE_URL, endpoints } from './apiConfig';

import { UserRequest, User } from './types';

/**
 *  * Performs a GET request to /users
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await get_users();
 */
export const get_users = async (
    data?: Record<string, unknown>,
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: Record<string, unknown>) => {
        if (!data) return url;
        return url.replace(/:(\w+)/g, (_, key) =>
            data[key as keyof typeof data] !== undefined
                ? String(data[key as keyof typeof data])
                : ''
        );
    };

    // Construct base URL
    const baseUrl = BASE_URL + endpoints.get_users;

    // Replace URL parameters
    const url = replaceUrlParams(baseUrl, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'GET',
        url,
        params: data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios(requestConfig);
        console.log('Response:', response.data);
        return response.data;
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', error.message);
            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }
        console.error('General Error:', error);
        throw error;
    }
};

/**
 *  * Performs a POST request to /users
 * @param {undefined} data.name
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await post_users({ name: "example name" });
 */
export const post_users = async (
    data?: UserRequest,
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: UserRequest) => {
        if (!data) return url;
        return url.replace(/:(\w+)/g, (_, key) =>
            data[key as keyof typeof data] !== undefined
                ? String(data[key as keyof typeof data])
                : ''
        );
    };

    // Construct base URL
    const baseUrl = BASE_URL + endpoints.post_users;

    // Replace URL parameters
    const url = replaceUrlParams(baseUrl, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'POST',
        url,
        data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios(requestConfig);
        console.log('Response:', response.data);
        return response.data;
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', error.message);
            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }
        console.error('General Error:', error);
        throw error;
    }
};

/**
 *  * Performs a GET request to /users/:id
 * @param {AxiosRequestConfig} [config] - Optional Axios request configuration
 * @returns {Promise<User>} - User response data
 * @throws {Error} - Throws an error for network or API-related issues
 * @example
 *  * const result = await get_users_id();
 */
export const get_users_id = async (
    data: Record<string, unknown>,
    config?: AxiosRequestConfig
): Promise<User> => {
    // URL parameter replacement utility
    const replaceUrlParams = (url: string, data?: Record<string, unknown>) => {
        if (!data) return url;
        return url.replace(/:(\w+)/g, (_, key) =>
            data[key as keyof typeof data] !== undefined
                ? String(data[key as keyof typeof data])
                : ''
        );
    };

    // Construct base URL
    const baseUrl = BASE_URL + endpoints.get_users_id;

    // Replace URL parameters
    const url = replaceUrlParams(baseUrl, data);

    const requestConfig: AxiosRequestConfig = {
        method: 'GET',
        url,
        params: data,
        ...config,
    };

    try {
        console.log('Requesting:', requestConfig);
        const response = await axios(requestConfig);
        console.log('Response:', response.data);
        return response.data;
    } catch (error) {
        if (isAxiosError(error)) {
            console.error('Axios Error:', error.message);
            throw new Error(
                error.response?.data?.message || error.message || 'An unexpected error occurred'
            );
        }
        console.error('General Error:', error);
        throw error;
    }
};
